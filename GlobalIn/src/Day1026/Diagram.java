package Day1026;

/*
	추상 클래스
	추상화의 이해와 선언법
	- 추상화 : 구체적인 개념으로부터 공통된 부분들만 추려내어 일반화할 수 있도록 하는 것
	- 일반적으로 사용할 수 있는 단계가 아닌 아직 미완성적인 개념
	- JAVA에서 추상화 작업을 하기 위해서는 먼저 추상 메소드를 이해해야 함
	추상 메소드
	- public abstract void 추상 메소드명();
	- 추상메소드를 정의하면 {} : 브레이크(몸체)를 생략하여 하는 일이 없는 메소드로 만듦 >> 몸체가 생략된 메소드
	- abstract라는 예약어를 통해 현 메소드가 추상 메소드임을 명시
	- 추상 메소드를 하나라도 가지게 되는 클래스가 바로 추상 클래스
	- 이런 추상 클래스 또한 다음과 같이 추상 클래스임을 명시한다
		public abstract class AbstractClass { }
	- 추상 클래스는 객체를 생성할 수 없다
	추상화 작업
	- 상속이 자손 클래스를 만드는 데 조상 클래스를 사용하는 것이라면, 추상화는 기존 클래스의 공통 부분을 뽑아내서 조상 클래스를 만드는 것
	- 상속 계층도를 따라 내려갈수록 세분화, 올라갈수록 공통 요소만 남게 된다
	추상화 : 클래스 간의 공통점을 찾아내서 공통의 조상을 만드는 작업
	구체화 : 상속을 통해서 클래스를 구현 확장하는 작업
*/

public abstract class Diagram { // 추상 클래스
	abstract void draw(); // 추상 메소드
/*
	private 선언하면 안 됨
	- 자식이 오버라이딩 해야 하는데 못 하게 되기 때문
	static 선언하면 안 됨
	- 객체 없이도 호출되는 메소드이므로 반드시 몸체가 정의되어야 하는 클래스.메소드() 형식으로 호출
 */
}